{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 83,
   "metadata": {},
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "from numpy.linalg import inv\n",
    "import os\n",
    "import math\n",
    "import pandas\n",
    "import scipy\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 84,
   "metadata": {},
   "outputs": [],
   "source": [
    "'''reading the data from the file and getting the values of X and Y'''\n",
    "os.chdir('/Users/sreelakshmirajendrakumar/Downloads')\n",
    "datasetLasso = pandas.read_csv('project3_F2019_lasso.csv')\n",
    "XLasso=datasetLasso.iloc[:,0:251]\n",
    "XLasso=XLasso.to_numpy()\n",
    "#appending the missing row from the dataset\n",
    "firstValues=list(datasetLasso.columns.values)\n",
    "for i in range(0,251):\n",
    "    firstValues[i]=float(firstValues[i])\n",
    "valuesToAppend=np.zeros((251,1))\n",
    "firstValues=np.array(firstValues)\n",
    "for i in range(0,251):\n",
    "    valuesToAppend[i]=firstValues[i]\n",
    "XLasso=np.concatenate((valuesToAppend.T,XLasso),axis=0) # is 200 the number of samples?\n",
    "\n",
    "X=XLasso[:,0:-1] # shape(250,200)\n",
    "Y=XLasso[:,-1] # shape(200,)\n",
    "X=np.reshape(X,(200,250))\n",
    "Y=np.reshape(Y,(200,1))\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 85,
   "metadata": {},
   "outputs": [],
   "source": [
    "def attach(attachX): # input: centralized X\n",
    "    '''attaching ones to the first column'''\n",
    "    (N,d)=np.shape(attachX)\n",
    "    tempX=np.ones((N,1))\n",
    "    attachedX=np.concatenate((tempX,attachX),axis=1)\n",
    "    return attachedX\n",
    "\n",
    "theLambda=np.arange(1,301,1)\n",
    "theLambda=np.square(theLambda)\n",
    "\n",
    "(N,d)=np.shape(X)\n",
    "X=attach(X)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 147,
   "metadata": {},
   "outputs": [],
   "source": [
    "def proximalLasso(Beta,Alpha,Lambda,X=X,Y=Y,d=d):\n",
    "    '''one iteration of proximal gradient descent algorithm for lasso'''    \n",
    "    temp=np.matmul(X.T,Y)\n",
    "    temp2=np.matmul(X.T,X)\n",
    "    temp3=np.matmul(temp2,Beta)\n",
    "    temp4=Alpha*2\n",
    "    temp5=np.subtract(temp,temp3)\n",
    "    U=np.multiply(temp5,temp4)\n",
    "    \n",
    "    temp6=np.add(Beta,U) # matrix\n",
    "    \n",
    "    tempBeta=[] # gives the value of beta on the next iteration\n",
    "        \n",
    "    for j in range(0,d+1):\n",
    "        if temp6[j]>Alpha*Lambda:\n",
    "            temp7=temp6[j]+(Alpha*Lambda)\n",
    "            tempBeta.append(temp7[0])\n",
    "        elif temp6[j]<=abs(Alpha*Lambda):\n",
    "            tempBeta.append(0)\n",
    "        elif temp6[j]<-Alpha*Lambda:\n",
    "            temp8=temp6[j]-(Alpha*Lambda)\n",
    "            tempBeta.append(temp8[0])\n",
    "            \n",
    "    return np.reshape(tempBeta,(d+1,1))\n",
    "\n",
    "hh=proximalLasso(np.random.rand(d+1,1),.00003,1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 148,
   "metadata": {},
   "outputs": [],
   "source": [
    "def proximalLassoIter(Alpha,Lambda,XIter=X,YIter=Y,dIter=d):\n",
    "    '''multiple iterations of proximal gradient descent algorithm for lasso'''\n",
    "    theBeta=[]   \n",
    "    initialBeta=np.random.rand(dIter+1,1)\n",
    "    i=1\n",
    "    flag=0\n",
    "    while True:\n",
    "        w=0\n",
    "        newBeta=proximalLasso(theBeta[i-1],Alpha,Lambda,XIter,YIter)\n",
    "        toAppend=np.reshape(np.array(newBeta),(d+1,1))\n",
    "        theBeta.append(toAppend) \n",
    "        \n",
    "        '''error=np.abs(np.subtract(theBeta[i],theBeta[i-1]))\n",
    "        i+=1\n",
    "            \n",
    "        for j in range(0,len(error)):\n",
    "            if error[j]<=10**-1:\n",
    "                w+=1\n",
    "        if w==len(error):\n",
    "            break'''\n",
    "        i+=1\n",
    "        if i==10:\n",
    "            break\n",
    "    return(theBeta,theBeta[-1])\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 143,
   "metadata": {},
   "outputs": [],
   "source": [
    "def truncateBeta(truncBeta): # pass the value of beta obtained on last the iteration\n",
    "    '''truncating small values in beta'''\n",
    "    for i in range(len(truncBeta)):\n",
    "        if abs(truncBeta[i])<10**(-5):\n",
    "            truncBeta[i]=0\n",
    "    return truncBeta  \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 144,
   "metadata": {},
   "outputs": [],
   "source": [
    "def separate(Beta):\n",
    "    BetaZero=Beta[0]\n",
    "    B=Beta[1:-1]\n",
    "    \n",
    "    return BetaZero,B \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 146,
   "metadata": {},
   "outputs": [
    {
     "ename": "IndexError",
     "evalue": "list index out of range",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mIndexError\u001b[0m                                Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-146-2285591105c8>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mindex\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mvalue\u001b[0m \u001b[0;32min\u001b[0m \u001b[0menumerate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtheLambda\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m     \u001b[0malpha\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m/\u001b[0m\u001b[0mvalue\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 6\u001b[0;31m     \u001b[0mtemp\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mtemp3\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mproximalLassoIter\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0malpha\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mvalue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      7\u001b[0m     \u001b[0mlambdaBeta\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mappend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtemp3\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;31m#use the last iterated value by the function\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      8\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m<ipython-input-142-c325fca66821>\u001b[0m in \u001b[0;36mproximalLassoIter\u001b[0;34m(Alpha, Lambda, XIter, YIter, dIter)\u001b[0m\n\u001b[1;32m      7\u001b[0m     \u001b[0;32mwhile\u001b[0m \u001b[0;32mTrue\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      8\u001b[0m         \u001b[0mw\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 9\u001b[0;31m         \u001b[0mnewBeta\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mproximalLasso\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtheBeta\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mAlpha\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mLambda\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mXIter\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mYIter\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     10\u001b[0m         \u001b[0mtoAppend\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mreshape\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0marray\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnewBeta\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0md\u001b[0m\u001b[0;34m+\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     11\u001b[0m         \u001b[0mtheBeta\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mappend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtoAppend\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mIndexError\u001b[0m: list index out of range"
     ]
    }
   ],
   "source": [
    "lambdaBeta=[]\n",
    "lambdaBetaZero=[]\n",
    "lambdaB=[]\n",
    "for index,value in enumerate(theLambda):\n",
    "    alpha=1/value\n",
    "    temp,temp3=proximalLassoIter(alpha,value)\n",
    "    lambdaBeta.append(temp3) #use the last iterated value by the function\n",
    "    \n",
    "    '''separating beta and b'''\n",
    "    temp1,temp2=separate(lambdaBeta[index])\n",
    "    lambdaBetaZero.append(temp1)\n",
    "    lambdaB.append(temp2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "'''plots for the question'''    \n",
    "def nonVanishingCoeff(recoverLambdaB=lambdaB): # apply this to all arrys in lambdaB and store in a matrix\n",
    "    toPlot=[]\n",
    "    for k in range(0,len(recoverLambdaB)):\n",
    "        w=0\n",
    "        for j in range(0,len(recoverLambdaB[0])):\n",
    "            if recoverLambdaB[k][j]!=0:\n",
    "                w+=1\n",
    "    toPlot.append(w)    \n",
    "    return toPlot\n",
    "    \n",
    "def plotB(jValue,LambdaB=lambdaB): # plotLambdaB is lambdaB and j is 21,36, and 200\n",
    "    toBePlotted=[]\n",
    "    for k in range(0,len(LambdaB)):\n",
    "        toBePlotted.append(LambdaB[k][j]) # plot against lambda\n",
    "        \n",
    "    return toBePlotted\n",
    "\n",
    "def increment(j,LambdaB=lambdaB,TheLambda=theLambda): \n",
    "    toPlot=[]\n",
    "    for k in range(0,len(LambdaB)-1):\n",
    "        temp=LambdaB[k+1][j]-Lambda[k][j]\n",
    "        temp1=theLambda[k+1]-thelambda[k]\n",
    "        temp3=temp/temp1\n",
    "        toPlot.append(temp3) # note that this is one element leaa than that of theLambda\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "'''Plotting'''\n",
    "w=nonVanishingCoeff()\n",
    "plt.plot(theLambda,w)\n",
    "plt.xlabel('lambda')\n",
    "plt.ylable('Number of non-vanishing coefficients')\n",
    "plt.title('Plotting non vanishing coefficients in b corresponding to the lambda values')\n",
    "\n",
    "\n",
    "\"\"\"plot of b(j) correspomding to each lambda\"\"\"\n",
    "j21=plotB(21)\n",
    "plt.plot(theLambda,j21)\n",
    "plt.xlabel('lambda')\n",
    "plt.ylable('Value of b(j) when j=21')\n",
    "plt.title('Plotting the value of b(j) corresponding to the lambda values when j=21')\n",
    "\n",
    "j36=plotB(36)\n",
    "plt.plot(theLambda,j36)\n",
    "plt.xlabel('lambda')\n",
    "plt.ylable('Value of b(j) when j=36')\n",
    "plt.title('Plotting the value of b(j) corresponding to the lambda values when j=36')\n",
    "\n",
    "j200=plotB(200)\n",
    "plt.plot(theLambda,j200)\n",
    "plt.xlabel('lambda')\n",
    "plt.ylable('Value of b(j) when j=200')\n",
    "plt.title('Plotting the value of b(j) corresponding to the lambda values when j=200')\n",
    "\n",
    "'''plot of increment corresponding to each lambda'''\n",
    "J21=increment(21)\n",
    "plt.plot(theLambda[1:],J21)\n",
    "plt.xlabel('lambda')\n",
    "plt.ylable('Value of increment when j=21')\n",
    "plt.title('Plotting the value of increment corresponding to the lambda values when j=21')\n",
    "\n",
    "J36=plotB(36)\n",
    "plt.plot(theLambda[1:],J36)\n",
    "plt.xlabel('lambda')\n",
    "plt.ylable('Value of b(j) when j=36')\n",
    "plt.title('Plotting the value of increment corresponding to the lambda values when j=36')\n",
    "\n",
    "J200=plotB(200)\n",
    "plt.plot(theLambda[1:],J200)\n",
    "plt.xlabel('lambda')\n",
    "plt.ylable('Value of increment when j=200')\n",
    "plt.title('Plotting the value of increment corresponding to the lambda values when j=200')\n",
    "\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
