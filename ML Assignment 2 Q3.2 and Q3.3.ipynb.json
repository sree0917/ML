{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 65,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import csv\n",
    "import os\n",
    "import math\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "os.chdir('/Users/sreelakshmirajendrakumar/Downloads')\n",
    "\n",
    "\n",
    "# reading the csv file\n",
    "x=[]\n",
    "for i in range(0,100):\n",
    "    x.append([])\n",
    "with open('OP_train1.csv') as csvfile:\n",
    "    readCSV = csv.reader(csvfile, delimiter=',')\n",
    "    for row in readCSV:\n",
    "        try:\n",
    "            for i in range(1,101):\n",
    "                x[i-1].append(float(row[i]))\n",
    "        except:\n",
    "            row==0\n",
    "Y=[]            \n",
    "with open('OP_train1.csv') as csvfile:\n",
    "    readCSV = csv.reader(csvfile, delimiter=',')\n",
    "    for row in readCSV:\n",
    "        try:\n",
    "            Y.append(float(row[101]))\n",
    "        except:\n",
    "            row==0\n",
    "            \n",
    "X=[]           \n",
    "for i in range(0,51):\n",
    "    if i!=0:\n",
    "        X.append([])\n",
    "        for j in range(0,100):\n",
    "            X[i-1].append(x[j][i])\n",
    "            \n",
    "\n",
    "def multivariate(l):\n",
    "    d=100\n",
    "    N=50            \n",
    "    #restructuring the X_test file\n",
    "    \n",
    "    W_T=[]\n",
    "    Z_T=[]\n",
    "    for i in range(0,d):\n",
    "        W_T.append([])\n",
    "        Z_T.append([])\n",
    "        index_0=[]\n",
    "        index_1=[]\n",
    "        for j in range(0,N):\n",
    "            if Y[j]==0:\n",
    "                W_T[i].append(X[j][i])\n",
    "                index_0.append(j)\n",
    "            else:\n",
    "                Z_T[i].append(X[j][i])\n",
    "                index_1.append(j)\n",
    "\n",
    "    w=np.transpose(W_T)\n",
    "    z=np.transpose(Z_T)\n",
    "\n",
    "    # finding u_(1,0) and U_(1,1)\n",
    "    u_10=[]\n",
    "    for i in range(0,d):\n",
    "        sum=0\n",
    "        for j in range(0,len(index_0)):\n",
    "            sum+=w[j][i]\n",
    "        if len(index_0)!=0:\n",
    "            sum=sum/len(index_0)\n",
    "        u_10.append(sum)\n",
    "    \n",
    "    \n",
    "    u_11=[]\n",
    "    for i in range(0,d):\n",
    "        sum=0\n",
    "        for j in range(0,len(index_1)):\n",
    "            sum+=z[j][i]\n",
    "        if len(index_1)!=0:\n",
    "            sum=sum/len(index_1)\n",
    "        u_11.append(sum)\n",
    "    \n",
    "        \n",
    "    # finding u_1 and u_2\n",
    "    u_1=[]\n",
    "    u_2=[]\n",
    "    for i in range(0,d):\n",
    "        sum=0\n",
    "        sum_2=0\n",
    "        for j in range(0,N):\n",
    "            sum+=X[j][i]\n",
    "            sum_2+=((X[j][i])**2)\n",
    "        u_1.append(sum/N)\n",
    "        u_2.append(sum_2/N)\n",
    "\n",
    "    # apply the equation --> 1. checking the value of lambda and element-wise opeation on the matrices\n",
    "\n",
    "    N_0=len(index_0)\n",
    "    N_1=len(index_1)\n",
    "\n",
    "    condition=[]\n",
    "    for i in range(0,d):\n",
    "        c=((N_0*N_1/(N**2))*(abs(u_11[i]-u_10[i])/np.sqrt(u_2[i]-(u_1[i]**2))))\n",
    "        condition.append(c)\n",
    "    \n",
    "    m_0=[]\n",
    "    m_1=[]\n",
    "    variance=[]\n",
    "    sigma=[]\n",
    "    for i in range(0,d):\n",
    "        if l>=condition[i]:\n",
    "            m_0.append(u_1[i])\n",
    "            m_1.append(u_1[i])\n",
    "            temp=(u_2[i]-(u_1[i]**2))\n",
    "            variance.append(temp)\n",
    "            sigma.append(np.sqrt(temp))\n",
    "        \n",
    "        elif l<=condition[i]:\n",
    "            s=u_2[i]-(u_1[i]**2)-((N_0*N_1/N**2)*((u_11[i]-u_10[i])**2))\n",
    "            sig=abs(u_11[i]-u_10[i])*l+np.sqrt(((u_11[i]-u_10[i])**2)*(l**2)+4*s)\n",
    "            sigma.append(np.sqrt(sig))\n",
    "            if u_11[i]>=u_10[i]:\n",
    "                temp1=u_10[i]+(((N_1/N)*(u_11[i]-u_10[i]))*sig*l)\n",
    "                temp2=u_11[i]-(((N_0/N)*(u_11[i]-u_10[i]))*sig*l)\n",
    "            else:\n",
    "                temp1=u_10[i]+(((N_1/N)*(u_10[i]-u_11[i]))*sig*l)\n",
    "                temp2=u_11[i]-(((N_0/N)*(u_10[i]-u_11[i]))*sig*l)\n",
    "            m_0.append(temp1)\n",
    "            m_1.append(temp2)\n",
    "        \n",
    "    g=0\n",
    "    for i in range(0,100):\n",
    "        if m_0[i]==m_1[i]:\n",
    "            g+=1\n",
    "    print('The required number of coordinates is '+str(g)+ ' when lambda = ' +str(l))\n",
    "    return m_0,m_1,sigma   \n",
    "        "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The required number of coordinates is 86 when lambda = 0.1\n",
      "The required number of coordinates is 97 when lambda = 0.15\n"
     ]
    }
   ],
   "source": [
    "#when lambda=.1\n",
    "m_0_1,m_1_1,sigma_1=multivariate(.1)\n",
    "#when lambda=.15\n",
    "m_0_2,m_1_2,sigma_2=multivariate(.15)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Question\n",
    "x_test=[]\n",
    "for i in range(0,100):\n",
    "    x_test.append([])\n",
    "with open('OP_test1.csv') as csvfile:\n",
    "    readCSV = csv.reader(csvfile, delimiter=',')\n",
    "    for row in readCSV:\n",
    "        try:\n",
    "            for i in range(1,101):\n",
    "                x_test[i-1].append(float(row[i]))\n",
    "        except:\n",
    "            row==0\n",
    "Y_test=[]            \n",
    "with open('OP_test1.csv') as csvfile:\n",
    "    readCSV = csv.reader(csvfile, delimiter=',')\n",
    "    for row in readCSV:\n",
    "        try:\n",
    "            Y_test.append(float(row[101]))\n",
    "        except:\n",
    "            row==0\n",
    "            \n",
    "X_test=[]           \n",
    "for i in range(0,51):\n",
    "    if i!=0:\n",
    "        X_test.append([])\n",
    "        for j in range(0,100):\n",
    "            X_test[i-1].append(x[j][i])\n",
    "\n",
    "Y_new=np.zeros(N)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The error when lambda=.1 is 0.48\n"
     ]
    }
   ],
   "source": [
    "#finding error when lambda=.1\n",
    "for i in range(0,N):\n",
    "    comp1=0\n",
    "    comp2=0\n",
    "    for j in range(0,d):\n",
    "        comp1+=(((X[i][j]-m_0_1[j])**2)/(sigma_1[j]**2))\n",
    "        comp2+=(((X[i][j]-m_1_1[j])**2)/(sigma_1[j]**2))\n",
    "    if comp1<comp2:\n",
    "        Y_new[i]=0\n",
    "    else:\n",
    "        Y_new[i]=1\n",
    "        \n",
    "error_rate=0\n",
    "for i in range(0,N):\n",
    "    if Y_new[i]!=Y_test[i]:\n",
    "        error_rate+=1\n",
    "error=error_rate/50\n",
    "\n",
    "print('The error when lambda=.1 is '+str(error))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The error when lambda=.15 is 0.48\n"
     ]
    }
   ],
   "source": [
    "#finding error when lambda=.15\n",
    "for i in range(0,N):\n",
    "    comp1=0\n",
    "    comp2=0\n",
    "    for j in range(0,d):\n",
    "        comp1+=(((X[i][j]-m_0_2[j])**2)/(sigma_2[j]**2))\n",
    "        comp2+=(((X[i][j]-m_1_2[j])**2)/(sigma_2[j]**2))\n",
    "    if comp1<comp2:\n",
    "        Y_new[i]=0\n",
    "    else:\n",
    "        Y_new[i]=1\n",
    "        \n",
    "error_rate=0\n",
    "for i in range(0,N):\n",
    "    if Y_new[i]!=Y_test[i]:\n",
    "        error_rate+=1\n",
    "error=error_rate/50\n",
    "\n",
    "print('The error when lambda=.15 is '+str(error))"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
